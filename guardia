On-Call Incident Management: Reflections and Improvements
1. Delayed SRE Involvement in Major Incidents
During my on-call shift, I noticed that when an incident occurs, the MCC (Major Command Center) team initiates a Slack channel with the Engineering team to discuss the severity of the incident. If the incident is classified as minor, the SRE team is not involved. However, when the priority is escalated to a major incident (based on metrics or discussions with the engineering owner), the SRE team is immediately pulled in.

Challenge: Since the SRE team is brought in late, it becomes difficult to catch up on the context and read through the communications that have already taken place. This lack of context can delay the resolution process.

Suggested Improvement: To avoid this gap, the SRE team should be looped into the channel as soon as the incident is created. Even if they don’t participate initially, having access to the discussions can help them get up to speed more quickly if escalation occurs.

2. Difficulty Tracking Multiple Threads in Slack Channels
Upon the creation of an incident channel, there are often multiple threads that start in parallel. Some of these threads can exceed 100+ messages. This makes it challenging, even for the MCC team, to track all ongoing discussions. When people respond in individual threads based on their concerns, it becomes even more fragmented.

Challenge: Keeping track of long or numerous Slack threads can be overwhelming and time-consuming for the on-call team, as important information may be buried across different threads.

Suggested Improvement: A best practice would be to centralize key updates into a single thread or create a summary of major points at regular intervals. A tool or bot that summarizes critical updates from multiple threads in real-time could also reduce this complexity.

3. VictorOps Call Details and War Room Accessibility
When receiving a VictorOps call, it would be helpful to have essential details included, such as the incident number and war room details. This way, the on-call team can directly join the war room or incident channel without needing to search through various Slack threads or channels.

Challenge: Searching for the correct Slack channel or thread during an incident wastes valuable time.

Suggested Improvement: VictorOps alerts should be configured to include the incident number and direct links to the relevant war room or Slack channel for seamless access.

4. Incident Severity Confirmation and Tracking
Occasionally, the MCC team asks the on-call SRE to confirm the severity of an incident. This involves going back through all the messages to understand the current situation before making a decision on whether the incident should be classified as Major, Minor, Blocker, etc.

Challenge: Having to review lengthy message histories during an ongoing incident adds complexity to severity confirmation, making the process tedious.

Suggested Improvement: It would be more efficient if the severity classification was clearly documented in the alert based on predefined metrics. This way, the on-call team wouldn’t need to manually re-assess the situation unless critical details change.

5. Post-Resolution Severity Updates
In some cases, I noticed that after resolving the incident, the severity classification is updated (e.g., from Major to Minor). This is confusing, as I believe the severity should be well-defined based on alerts and metrics from the onset.

Challenge: Changing the severity post-resolution could affect how we evaluate response times and SLAs. It is unclear how to handle post-incident changes to severity classifications.

Suggested Improvement: Severity should be determined upfront, based on clear metrics and alerts. Any changes after resolution should be made as tags or annotations, rather than altering the severity itself. The SLA should align with the severity at the time the incident was active, ensuring consistency in performance tracking.
