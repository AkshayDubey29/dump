def process_incident_data(incidents):
    """Process incidents to calculate MTTR, MTTD, and other metrics."""
    data = []
    for incident in incidents['incidents']:
        transitions = {t['name']: t['at'] for t in incident['transitions']}
        start_time = parse(transitions.get('triggered', ''))
        end_time = parse(transitions.get('resolved', ''))
        ack_time = parse(transitions.get('acknowledged', ''))

        duration = (end_time - start_time).total_seconds() / 60 if end_time > start_time else None
        detect_time = (ack_time - start_time).total_seconds() / 60 if ack_time > start_time else None

        data.append({
            "Incident ID": incident['incidentNumber'],
            "Start Time": start_time,
            "End Time": end_time,
            "Duration (minutes)": duration,
            "Detection Time (minutes)": detect_time,
            "Current Phase": incident['currentPhase'],
            "Entity Display Name": incident['entityDisplayName'],
            "User Acknowledged": incident['pagedUsers'][0] if incident['pagedUsers'] else "System"
        })

    df = pd.DataFrame(data)
    mttr = df["Duration (minutes)"].mean()  # Mean Time to Resolve
    mttd = df["Detection Time (minutes)"].mean()  # Mean Time to Detect
    alert_count = len(incidents['incidents'])
    return df, mttr, mttd, alert_count
