import pandas as pd
from atlassian import Confluence
import requests
import datetime
import logging

# Configure logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# VictorOps API and Wiki Details
VICTOROPS_URL = "https://portal.victorops.com/api-reporting/v1/org/coupang/oncalluser/incidents_csv"
API_PARAMS = {
    'user': 'akdubey.coupang',
    'team': 'team-E0JaM9bovUUBMaJY',
    'startDate': None,
    'endDate': None
}
CONFLUENCE_URL = "https://wiki.coupang.net"
CONFLUENCE_USERNAME = "your_username"
CONFLUENCE_TOKEN = "your_api_token"
WIKI_SPACE = "MST"
WIKI_PARENT_PAGE_TITLE = "Reports"

# Confluence Initialization
confluence = Confluence(
    url=CONFLUENCE_URL,
    username=CONFLUENCE_USERNAME,
    password=CONFLUENCE_TOKEN
)

# Helper functions
def get_victorops_data(start_date, end_date):
    """Fetch incidents from VictorOps as a CSV file."""
    API_PARAMS['startDate'] = int(start_date.timestamp() * 1000)
    API_PARAMS['endDate'] = int(end_date.timestamp() * 1000)
    response = requests.get(VICTOROPS_URL, params=API_PARAMS)
    response.raise_for_status()
    return pd.read_csv(pd.compat.StringIO(response.text))

def process_incident_data(df):
    """Process incident data to extract meaningful statistics."""
    df['Date Time (UTC)'] = pd.to_datetime(df['Date Time (UTC)'])
    repeated_alerts = df['Event'].value_counts().reset_index()
    repeated_alerts.columns = ['Event', 'Count']
    unique_alerts = df['Event'].nunique()
    user_acknowledgement = df.groupby(['User'])['Incident'].count().reset_index()
    user_acknowledgement.columns = ['User', 'Ticket Count']
    return repeated_alerts, unique_alerts, user_acknowledgement

def create_confluence_page(parent_page_id, title, content):
    """Create a new child page in Confluence."""
    try:
        confluence.create_page(
            space=WIKI_SPACE,
            title=title,
            body=content,
            parent_id=parent_page_id
        )
        logger.info(f"Successfully created page: {title}")
    except Exception as e:
        logger.error(f"Failed to create page: {e}")

def generate_weekly_report():
    """Main function to generate and publish the weekly report."""
    today = datetime.date.today()
    last_monday = today - datetime.timedelta(days=today.weekday())
    last_sunday = last_monday - datetime.timedelta(days=1)
    start_date = last_sunday - datetime.timedelta(days=6)
    end_date = last_sunday

    # Fetch data
    incidents = get_victorops_data(start_date, end_date)

    # Process data
    repeated_alerts, unique_alerts, user_acknowledgement = process_incident_data(incidents)

    # Generate Confluence content
    content = f"""
    <h1>Weekly Report: {start_date} to {end_date}</h1>
    <h2>Overview</h2>
    <p>Total Incidents: {len(incidents)}</p>
    <p>Unique Alerts: {unique_alerts}</p>
    
    <h2>Repeated Alerts</h2>
    {repeated_alerts.to_html(index=False, escape=False)}
    
    <h2>User Acknowledgements</h2>
    {user_acknowledgement.to_html(index=False, escape=False)}
    
    <h2>All Incidents</h2>
    {incidents.to_html(index=False, escape=False)}
    """

    # Find parent page ID
    parent_page = confluence.get_page_by_title(WIKI_SPACE, WIKI_PARENT_PAGE_TITLE)
    if not parent_page:
        logger.error("Parent page not found.")
        return
    parent_page_id = parent_page['id']

    # Create child page
    report_title = f"Weekly Report: {start_date} to {end_date}"
    create_confluence_page(parent_page_id, report_title, content)

# Run the script
if __name__ == "__main__":
    generate_weekly_report()
